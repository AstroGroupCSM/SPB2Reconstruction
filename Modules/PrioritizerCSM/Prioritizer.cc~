#include "Prioritizer.h"
#include <utl/Trace.h>

using namespace fwk;
using namespace utl;
using namespace fevt;
using namespace det;
using namespace std;

namespace Prior {


Prioritizer::Prioritizer() {}

Prioritizer::~Prioritizer(){}

VModule::ResultFlag 
Prioritizer::Init()
{
  INFO("PRORITiZING");
  return eSuccess;
}

VModule::ResultFlag 
Prioritizer::Run(evt::Event& event)
{
  int iphe[3][36][8][8][128];
  fill(&iphe[0][0][0][0][0], &iphe[0][0][0][0][0] + (3*36*8*8*128), 0);
  Input(event,iphe);
  return eSuccess;
}

VModule::ResultFlag 
Prioritizer::Finish() 
{
  return eSuccess;
}
  
  void Prioritizer::Input(evt::Event& event,int ibs[3][36][8][8][128]){
  
  FEvent& fdEvent = event.GetFEvent();
  int fPDMid;
  for (fevt::FEvent::ConstEyeIterator eye = fdEvent.EyesBegin(ComponentSelector::eUnknown);
       eye != fdEvent.EyesEnd(ComponentSelector::eUnknown); ++eye) {
    for (fevt::Eye::ConstTelescopeIterator tel = eye->TelescopesBegin(ComponentSelector::eUnknown);
	 tel != eye->TelescopesEnd(ComponentSelector::eUnknown); ++tel) {
      
      for (fevt::Telescope::ConstCCBIterator ccb = tel->CCBsBegin(ComponentSelector::eUnknown);
	   ccb != tel->CCBsEnd(ComponentSelector::eUnknown); ++ccb) {
	
	for (fevt::CCB::ConstPDMIterator pdm = ccb->PDMsBegin(ComponentSelector::eUnknown);
	     pdm != ccb->PDMsEnd(ComponentSelector::eUnknown); ++pdm) {
	  int ipdm = pdm->GetId();
	  if (fPDMid < ipdm) fPDMid = ipdm;
	  
	  for (fevt::PDM::ConstECIterator ec = pdm->ECsBegin(ComponentSelector::eUnknown);
	       ec != pdm->ECsEnd(ComponentSelector::eUnknown); ++ec) {
	    int iec = ec->GetId();
	    
	    for (fevt::EC::ConstPMTIterator pmt = ec->PMTsBegin(ComponentSelector::eUnknown);
		 pmt != ec->PMTsEnd(ComponentSelector::eUnknown); ++pmt) {
	      int ipmt = pmt->GetId();
	      
	      for (fevt::PMT::ConstPixelIterator pix = pmt->PixelsBegin(ComponentSelector::eUnknown);
		   pix != pmt->PixelsEnd(ComponentSelector::eUnknown); ++pix) {
		int ipix = pix->GetId();
		
		if(pix->HasRecData()){
		  const PixelRecData& pr = pix->GetRecData();
		  
		  for (PixelRecData::ConstFADCTraceIterator trIt = pr.FADCTracesBegin(); trIt != pr.FADCTracesEnd(); ++trIt) {
		    if (static_cast<FdConstants::LightSource>(trIt->GetLabel()) == FdConstants::eBackgroundSubtracted){
		      const TraceI& trace = pix->GetRecData().GetFADCTrace(FdConstants::eBackgroundSubtracted);
		      int irow=0,icol=0;
                      
		      for(int igtu=0;igtu<128; igtu++){
			irow = (ipix-1)/8;// irow per PMT
			icol = ((ipix-1)%8);// icol per PMT
			int ipmt_global = ((iec-1)) * 4 + (ipmt-1);
			ibs[ipdm-1][ipmt_global][irow][icol][igtu] = trace[igtu];
		      }
		    }
		  }
		}
	      }
	    }
	  }
	}
      }
    }
  }
}
  
}
